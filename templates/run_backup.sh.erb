#!/usr/bin/env bash

source <%= @restic_path %>/config.sh

### --- LOGIC --- ###

export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
export GOGC=$GOGC

RUN_RESTIC="$RESTIC_BIN --repo $REPO --password-file $PASSWORD_FILE --limit-upload $UPLOAD_LIMIT_KiB --no-cache"
BACKUP_NEEDED=0
HOST=`hostname`
KEEPLAST=<%= @restic_keep_last %>
KEEPWITHINDURATION=<%= @restic_keep_within_duration %>


# check if password file exists
if [ ! -f $PASSWORD_FILE ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') -- Password file $PASSWORD_FILE not found, exiting"
    exit 1
fi

# check if prebackup process is running
NUM_OF_PROC=`ps aux | grep prebackup.sh | grep -v grep | wc -l`
if [ "$NUM_OF_PROC" != "0" ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') -- Restic prebackup process still running. exiting"
    ps aux | grep prebackup.sh | grep -v grep | awk '{print "Started at: "$9 " || Running for: " $10}'
    exit 0
fi

# check if backup process is running
NUM_OF_PROC=`ps aux | grep restic | grep backup | grep -v run_backup | wc -l`
if [ "$NUM_OF_PROC" != "0" ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') -- Restic backup process still running. exiting"
    ps aux | grep restic | grep backup | awk '{print "Started at: "$9 " || Running for: " $10}'
    exit 0
fi

# check if burp backup process is running
NUM_OF_PROC=`ps aux | grep burp | grep -v grep | wc -l`
if [ "$NUM_OF_PROC" = "1" ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') -- Burp backup process still running. exiting"
    ps aux | grep burp | awk '{print "Started at: "$9 " || Running for: " $10}'
    exit 0
fi


# check if backup has been made
SNAPSHOT_CHECK=`$RUN_RESTIC snapshots -H $HOST 2>&1`
NUM_OF_BACKUP=`echo $SNAPSHOT_CHECK | grep "snapshots" | wc -l`

# when locked, wait and skip init. 
if [[ $SNAPSHOT_CHECK =~ "unable to create lock in backend" ]] ; then
  echo "$(date '+%Y-%m-%d %H:%M:%S') -- Snapshot check returned lock in backend, waiting 5 minutes and unlocking before second try"
  sleep 5m
  $RUN_RESTIC unlock 2>&1 >> /var/log/restic/restic.log
  SNAPSHOT_CHECK=`$RUN_RESTIC snapshots -H $HOST 2>&1`
  if [[ $SNAPSHOT_CHECK =~ "unable to create lock in backend" ]] ; then
     echo "$(date '+%Y-%m-%d %H:%M:%S') -- Snapshot check 2nd try also returned lock in backend, exiting backup run"
     exit 0
  fi
fi

if [ "$NUM_OF_BACKUP" = "0" ] ; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') -- Initializing Repo and order to create backup"
    $RUN_RESTIC init
    BACKUP_NEEDED=1
fi

# check if repo is initialised but no backups are ever made.
NUM_OF_BACKUP=`echo $SNAPSHOT_CHECK | grep " 0\ snapshots" | wc -l`
if [ "$NUM_OF_BACKUP" = "1" ] ; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') -- No backups made"
    BACKUP_NEEDED=1
fi

# check if backup is needed since yesterday
if [ "$BACKUP_NEEDED" -eq 0 ] ; then
   LAST_BACKUP=`$RUN_RESTIC snapshots -H $HOST --last | tail -n 3 | head -n 1 | awk -F '  ' '{print $2}'`
   LAST_BACKUP_EPOCH=`date +%s -d "$LAST_BACKUP"`
   PREV_TIME_BACKUP=`date +%s -d "$TIME_BETWEEN_BACKUP"`
   if [ "$PREV_TIME_BACKUP" -gt "$LAST_BACKUP_EPOCH" ] ; then
       echo "$(date '+%Y-%m-%d %H:%M:%S') -- No backup since $TIME_BETWEEN_BACKUP, so backup needed. Last backup was $LAST_BACKUP"
       BACKUP_NEEDED=1
   fi
fi

if [ "$BACKUP_NEEDED" -eq 1 ] ; then
  <%= @pre_backup_script_command %> 
  if [ $? = "1" ] ; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') -- Error in prebackup, check /var/log/restic/prebackup.log"
    exit 2
  fi
  echo "$(date '+%Y-%m-%d %H:%M:%S') -- Backup initiated"
  $RUN_RESTIC backup $BACKUP_PATH --verbose --exclude-file=$EXCLUDE_FILE 2>&1 >> /var/log/restic/restic.log

# report ok when backup succeeded and start forget action
  if [ $? = "0" ] ; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') -- Backup succeeded"
    echo "$(date '+%Y-%m-%d %H:%M:%S') -- Forget snapshots with keeping atleast $KEEPLAST and not forgetting earlier than $KEEPWITHINDURATION"
    $RUN_RESTIC --host $HOST forget --keep-last $KEEPLAST --keep-within $KEEPWITHINDURATION 2>&1 >> /var/log/restic/restic.log
    # when forget action fails then try again in 5 minutes, create warning state when failed for a second time. 
    if [ $? = "1" ] ; then    
      echo "$(date '+%Y-%m-%d %H:%M:%S') -- Backup forget action first try failed, waiting 5 minutes and try to clear stale locks before 2nd try"
      sleep 5m
      $RUN_RESTIC unlock 2>&1 >> /var/log/restic/restic.log
      $RUN_RESTIC --host $HOST forget --keep-last $KEEPLAST --keep-within $KEEPWITHINDURATION 2>&1 >> /var/log/restic/restic.log
      if [ $? = "1" ] ; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') -- Backup forget action failed to run"
        exit 1
      fi
    fi
  else
    echo "$(date '+%Y-%m-%d %H:%M:%S') -- Backup failed"
  fi
else
    echo "$(date '+%Y-%m-%d %H:%M:%S') -- No backup required, Last backup was $LAST_BACKUP"
fi

