#!/bin/bash
#
# PgSQL Backup Script
#Dumps postgres databases to a file for another backup tool to pick up.
#
##### START CONFIG ###################################################

USER=<%= scope.lookupvar('restic::pgsqlbackupuser') %>
DIR=<%= scope.lookupvar('restic::backuprootfolder') %>/pgsql
PREFIX=pgsql

# Define and Create mysql backup directory if needed
DIR=<%= scope.lookupvar('restic::backuprootfolder') %>/pgsql
mkdir -p $DIR

<% if scope.lookupvar('restic::docker') == true -%>
CMD="docker exec <%= scope.lookupvar('restic::docker_container') %>"
<% else -%>
CMD="su - ${USER} -c "
chown -R ${USER}:root <%= scope.lookupvar('restic::backuprootfolder') %>
<% end -%> 


##### STOP CONFIG ####################################################
PATH=/usr/bin:/usr/sbin:/bin:/sbin

set -o pipefail

<% if scope.lookupvar('restic::pgsqlalldatabases') == true -%>
${CMD} "pg_dumpall" -U postgres | gzip -c > ${DIR}/${PREFIX}.gz
    if [ $? -eq 1 ]
      then
        echo "Error detected dumping all progress databases"
        exit 1
    fi

<% else -%>
<% scope.lookupvar('restic::pgsqldatabasearray').each do |db| -%>
<% if scope.lookupvar('restic::pgsqlprebackupvacuum') == true -%>
${CMD} "/usr/bin/psql -d <%=db %> <<EOF
SET statement_timeout = 0;
VACUUM ANALYZE;
EOF" | grep -v "SET"
    if [ $? -eq 1 ]
      then
        echo "Error detected during vacuum"
        exit 1
    fi
<% end -%> 
${CMD} "pg_dumpall -g -U postgres > ${DIR}/${PREFIX}_<%=db %>_globals.sql"
    if [ $? -eq 1 ]
      then
        echo "Error detected during globals dump of db: <%=db %>"
        exit 1
    fi
${CMD} "pg_dump <%=db %> -Fc --schema-only > ${DIR}/${PREFIX}_<%=db %>_schemaonly.dump"
    if [ $? -eq 1 ]
      then
        echo "Error detected during schema dump of db: <%=db %>"
        exit 1
    fi
${CMD} "pg_dump <%=db %> -Fc > ${DIR}/${PREFIX}_<%=db %>.dump"
    if [ $? -eq 1 ]
      then
        echo "Error detected during dump of db: <%=db %>"
        exit 1
    fi

<% end -%> 
<% end -%>

chown -R root:root <%= scope.lookupvar('restic::backuprootfolder') %>
